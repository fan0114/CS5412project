package cs5412.project.distributed_file_system.dao.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.inject.Inject;
import javax.inject.Named;
import javax.sql.DataSource;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import cs5412.project.distributed_file_system.dao.UserDAO;
import cs5412.project.distributed_file_system.pojo.User;

@Named
public class UserJdbcDAO implements UserDAO {

	@Inject
	private JdbcTemplate jdbcTemplate;

	public void setDataSource(DataSource dataSource) {
		this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private static final class UserMapper implements RowMapper<User> {
		public User mapRow(ResultSet rs, int rowNum) throws SQLException {
			User user = new User();
			user.setUid(rs.getInt("uid"));
			user.setUsername(rs.getString("uname"));
			user.setPassword(rs.getString("password"));
			user.setEmail(rs.getString("email"));
			user.setCurrentVersion(rs.getInt("current_version"));
			return user;
		}
	}

	@Override
	public User getUserByUid(int uid) {
		User ret = (User) this.jdbcTemplate
				.queryForObject(
						"select uid, uname, password, email, current_version from User where uid = ?",
						new Object[] { uid }, new UserMapper());
		return ret;
	}

	@Override
	public int createUser(User user) {
		final String INSERT_SQL = "insert into User (uname, password, email, current_version) values (?, ?, ?, ?)";
		long autoGeneratedKey = -1;
		final User _user = user;
		KeyHolder keyHolder = new GeneratedKeyHolder();
		try {
			this.jdbcTemplate.update(new PreparedStatementCreator() {
				public PreparedStatement createPreparedStatement(
						Connection connection) throws SQLException {
					PreparedStatement ps = connection.prepareStatement(
							INSERT_SQL, new String[] { "uid" });
					ps.setString(1, _user.getUsername());
					ps.setString(2, _user.getPassword());
					ps.setString(3, _user.getEmail());
					ps.setInt(4, _user.getCurrentVersion());
					return ps;
				}
			}, keyHolder);
			autoGeneratedKey = (Long) keyHolder.getKey();
		} catch (Exception ex) {
			return -1;
		}
		return (int) autoGeneratedKey;
	}

	@Override
	public boolean updateUser(User user) {
		try {
			this.jdbcTemplate
					.update("update User set uname = ?, password=?, email=?, current_version=? where uid = ?",
							new Object[] { user.getUsername(),
									user.getPassword(), user.getEmail(),
									user.getCurrentVersion(), user.getUid() });
		} catch (DataAccessException e) {
			return false;
		}
		return true;
	}

	@Override
	public boolean deleteUser(User user) {
		if (user.getUid() <= 0) {
			return false;
		}
		try {
			this.jdbcTemplate.update("delete from User where uid = ?",
					new Object[] { user.getUid() });
		} catch (DataAccessException e) {
			return false;
		}
		return true;
	}

}
